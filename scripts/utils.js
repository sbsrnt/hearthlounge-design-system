import { forEach, lowerCase } from 'lodash';
import yaml from 'js-yaml';
import fs from 'fs';

/* eslint-disable */
export const filePath = category => `./src/styles/${category}.scss`;

export const isPlainObject = x => Object(x) === x && !Array.isArray(x);

export const formatKey = (...segments) => segments.join('-');

export const formatScss = v =>
  v.reduce((acc, value) => {
    const convertedValue = `$${value[0]}: ${value[1]};`;
    return [...acc, convertedValue];
  }, []);

export const deepKeys = (o, pre = [], acc = []) =>
  Object.entries(o).reduce(
    (acc, { 0: k, 1: v }) =>
      isPlainObject(o[k])
        ? [...acc, ...deepKeys(o[k], [...pre, k], acc)]
        : [...acc, [formatKey(...pre, k), v]],
    []
  );

export const convertToScssVariables = o => {
  const pairs = deepKeys(o);
  return formatScss(pairs);
};

export const getTokens = async () => {
  try {
    return await yaml.safeLoad(fs.readFileSync('./tokens/tokens.yml', 'utf8'));
  } catch (e) {
    console.log(e);
  }
};

export const buildScssVariables = async category => {
  const tokens = await getTokens();

  if (tokens) {
    const src = [
      `// DO NOT EDIT THIS FILE DIRECTLY, IT IS`,
      `// AUTOGENERATED BY /scripts/extract-tokens/${lowerCase(category)}.js\n`,
    ];

    const tokensAsScssVars = await convertToScssVariables(tokens[category]);

    forEach(tokensAsScssVars, value => src.push(value));

    return src.join('\n');
  }
};
