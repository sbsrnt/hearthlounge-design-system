import { forEach, tail, lowerCase, camelCase } from 'lodash';
import yaml from 'js-yaml';
import fs from 'fs';
import { render } from 'sass-extract';
import { nestedTokenColors } from '../tokens/categories';

/* eslint-disable */
export const scssFilePath = category => `./src/styles/${category}.scss`;
export const jsFilePath = category => `./src/${lowerCase(category)}.js`;
export const iconsFilePath = fileName => `./src/${fileName}.js`;
export const tokensFilePath = `./tokens/tokens.json`;

export const isPlainObject = x => Object(x) === x && !Array.isArray(x);

export const formatKey = (...segments) => segments.join('-');

export const formatScss = v =>
  v.reduce((acc, value) => {
    const convertedValue = `$${value[0]}: ${value[1]};`;
    return [...acc, convertedValue];
  }, []);

export const deepKeys = (o, pre = [], acc = []) =>
  Object.entries(o).reduce(
    (acc, { 0: k, 1: v }) =>
      isPlainObject(o[k])
        ? [...acc, ...deepKeys(o[k], [...pre, k], acc)]
        : [...acc, [formatKey(...pre, k), v]],
    []
  );

export const convertToScssVariables = o => {
  const pairs = deepKeys(o);
  return formatScss(pairs);
};

export const getTokens = async () => {
  try {
    return await yaml.safeLoad(fs.readFileSync('./tokens/tokens.yml', 'utf8'));
  } catch (e) {
    console.log(e);
  }
};

export const buildScssVariables = async category => {
  const tokens = await getTokens();

  if (tokens) {
    const src = [
      `// DO NOT EDIT THIS FILE DIRECTLY, IT IS`,
      `// AUTOGENERATED BY /scripts/extract-tokens.js\n`,
    ];

    const tokensAsScssVars = await convertToScssVariables(tokens[category]);

    forEach(tokensAsScssVars, value => src.push(value));

    return src.join('\n');
  }
};

export const buildJsColors = async () => {
  const tokens = await getTokens();

  if (tokens) {
    const src = [
      `// DO NOT EDIT THIS FILE DIRECTLY, IT IS`,
      `// AUTOGENERATED BY /scripts/extract-tokens.js\n`,
    ];

    const { vars } = await render({
      file: 'src/styles/_colors.scss',
    });

    forEach(vars.global, ({ type, value }, name) => {
      let simplifiedName = tail(name.split('-'));

      if (nestedTokenColors.includes(simplifiedName[0])) {
        simplifiedName = tail(simplifiedName);
      }
      simplifiedName.join('-');

      if (type === 'SassColor') {
        src.push(`export const ${camelCase(simplifiedName)} = '${value.hex}';`);
      }
    });

    return src.join('\n');
  }
};

export const buildTokensJSON = async () => {
  const tokens = await getTokens();

  if (tokens) {
    return JSON.parse(JSON.stringify(tokens));
  }
};

export const buildIcons = async iconsJSON => {
  if (iconsJSON) {
    const src = [
      `// DO NOT EDIT THIS FILE DIRECTLY, IT IS`,
      `// AUTOGENERATED BY /scripts/extract-icons.js\n`,
    ];
    src.push(`// eslint-disable \n`);
    src.push(`export const icons = ${JSON.stringify(iconsJSON)}`);
    return src.join('\n');
  }
};
